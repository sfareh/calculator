{"ast":null,"code":"import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    } // TODO check if any row/col are zero except the diagonal\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n\n\n    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix\n    // A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n\n    reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues\n\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms the hessenberg\n    // matrix to upper triangular\n    // compose transformations A → hess. and hess. → triang.\n\n    C = multiply(inv(R), C);\n    var vectors;\n\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n\n    return {\n      values,\n      vectors\n    };\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n\n\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic\n\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R\n\n    var Rdiag;\n\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    } // this isn't the only time we loop thru the matrix...\n\n\n    var last = false;\n\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = zero;\n        var rowNorm = zero;\n\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]);\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n          var f = one;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          } // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n\n\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation\n\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            } // keep track of transformations\n\n\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    } // return the diagonal row transformation matrix\n\n\n    return diag(Rdiag);\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n\n\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n      var maxIndex = 0;\n      var max = zero;\n\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      } // This col is pivoted, no need to do anything\n\n\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column\n\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      } // Reduce following rows and columns\n\n\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n\n        if (n === 0) {\n          continue;\n        } // from j-th row subtract n-times (i+1)th row\n\n\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        } // to (i+1)th column add n-times j-th column\n\n\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n\n    return R;\n  }\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n\n\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    if (big) {\n      prec = bignumber(prec);\n    } // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n\n    var arr = clone(A); // the list of converged eigenvalues\n\n    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge\n\n    var n = N; // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n\n    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm\n\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence\n\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps\n\n    var lastConvergenceBefore = 0;\n\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      } // TODO do an implicit QR transformation\n\n\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      } // keep track of transformations\n\n\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      } // The rightmost diagonal element converged to an eigenvalue\n\n\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 1;\n        arr.pop();\n\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        } // The rightmost diagonal 2x2 block converged\n\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 2;\n        arr.pop();\n        arr.pop();\n\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n\n          arr[_i3].pop();\n        }\n      }\n\n      if (n === 0) {\n        break;\n      }\n    } // standard sorting\n\n\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge\n\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    } // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n\n\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n  /**\n   * @param {Matrix} A original matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n\n\n  function findEigenvectors(A, N, C, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n\n    var uniqueValues = [];\n    var multiplicities = [];\n\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    } // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)\n\n    var failedLambdas = [];\n\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      var _λ = uniqueValues[_i4];\n\n      var _A = subtract(U, multiply(_λ, E)); // the characteristic matrix\n\n\n      var solutions = usolveAll(_A, b);\n      solutions = solutions.map(v => multiply(C, v));\n      solutions.shift(); // ignore the null vector\n      // looks like we missed something, try inverse iteration\n\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(_A, N, solutions, prec, type);\n\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(_λ);\n          break;\n        }\n\n        solutions.push(approxVec);\n      }\n\n      vectors.push(...solutions.map(v => flatten(v)));\n    }\n\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n\n    return vectors;\n  }\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n\n\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n\n\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular\n    // return an identity matrix\n\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    } // matrix is diagonalizable\n    // return its eigenvectors as columns\n\n\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    } // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n\n\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    } // add rows\n\n\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n\n    return arr;\n  }\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n\n\n  function blockDiag(arr, N) {\n    var M = [];\n\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n\n    var I = 0;\n\n    for (var sub of arr) {\n      var n = sub.length;\n\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n\n      I += n;\n    }\n\n    return M;\n  }\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n\n\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n\n\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n    // you better choose a random vector before I count to five\n\n    var i = 0;\n\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n\n      if (++i >= 5) {\n        return null;\n      }\n    } // you better converge before I count to ten\n\n\n    i = 0;\n\n    while (true) {\n      var c = usolve(A, b);\n\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n\n      if (++i >= 10) {\n        return null;\n      }\n\n      b = normalize(c);\n    }\n\n    return b;\n  }\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n\n\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex'; // generate random vector with the correct type\n\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n\n    if (cplx) {\n      v = v.map(n => complex(n));\n    } // project to orthogonal complement\n\n\n    v = orthogonalComplement(v, orthog); // normalize\n\n    return normalize(v, type);\n  }\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n\n\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n\n    return v;\n  }\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n\n\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n\n\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n\n  return complexEigs;\n}","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/function/matrix/eigs/complexEigs.js"],"names":["clone","createComplexEigs","_ref","addScalar","subtract","flatten","multiply","multiplyScalar","divideScalar","sqrt","abs","bignumber","diag","inv","qr","usolve","usolveAll","equal","complex","larger","smaller","matrixFromColumns","dot","complexEigs","arr","N","prec","type","findVectors","undefined","R","balance","reduceToHessenberg","values","C","iterateUntilTriangular","vectors","findEigenvectors","big","cplx","zero","one","radix","radixSq","Rdiag","Array","fill","last","i","colNorm","rowNorm","j","c","f","_c","rowDivRadix","rowMulRadix","condition","g","_j","maxIndex","max","el","tmp1","_j2","tmp2","tmp3","_j3","n","k","_k","_k2","A","lambdas","Sdiag","Qtotal","Qpartial","lastConvergenceBefore","Q","_i","push","unshift","inflateMatrix","pop","_i2","ll","eigenvalues2x2","jordanBase2x2","_i3","sort","a","b","err","Error","join","blockDiag","Cinv","U","uniqueValues","multiplicities","λ","indexOf","len","length","E","failedLambdas","_i4","_λ","_A","solutions","map","v","shift","approxVec","inverseIterate","d","trA","detA","x","y","l1","l2","na","nb","nc","nd","_i5","M","I","sub","_i6","fn","orthog","largeNum","randomOrthogonalVector","norm","orthogonalComplement","normalize","_","Math","random","w"],"mappings":"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","sourcesContent":["import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    } // TODO check if any row/col are zero except the diagonal\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n\n\n    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix\n    // A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n\n    reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues\n\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms the hessenberg\n    // matrix to upper triangular\n    // compose transformations A → hess. and hess. → triang.\n\n    C = multiply(inv(R), C);\n    var vectors;\n\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n\n    return {\n      values,\n      vectors\n    };\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n\n\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic\n\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R\n\n    var Rdiag;\n\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    } // this isn't the only time we loop thru the matrix...\n\n\n    var last = false;\n\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = zero;\n        var rowNorm = zero;\n\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]);\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n          var f = one;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          } // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n\n\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation\n\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            } // keep track of transformations\n\n\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    } // return the diagonal row transformation matrix\n\n\n    return diag(Rdiag);\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n\n\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n      var maxIndex = 0;\n      var max = zero;\n\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      } // This col is pivoted, no need to do anything\n\n\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column\n\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      } // Reduce following rows and columns\n\n\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n\n        if (n === 0) {\n          continue;\n        } // from j-th row subtract n-times (i+1)th row\n\n\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        } // to (i+1)th column add n-times j-th column\n\n\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n\n    return R;\n  }\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n\n\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    if (big) {\n      prec = bignumber(prec);\n    } // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n\n    var arr = clone(A); // the list of converged eigenvalues\n\n    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge\n\n    var n = N; // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n\n    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm\n\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence\n\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps\n\n    var lastConvergenceBefore = 0;\n\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      } // TODO do an implicit QR transformation\n\n\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      } // keep track of transformations\n\n\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      } // The rightmost diagonal element converged to an eigenvalue\n\n\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 1;\n        arr.pop();\n\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        } // The rightmost diagonal 2x2 block converged\n\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 2;\n        arr.pop();\n        arr.pop();\n\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n\n          arr[_i3].pop();\n        }\n      }\n\n      if (n === 0) {\n        break;\n      }\n    } // standard sorting\n\n\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge\n\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    } // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n\n\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n  /**\n   * @param {Matrix} A original matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n\n\n  function findEigenvectors(A, N, C, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n\n    var uniqueValues = [];\n    var multiplicities = [];\n\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    } // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)\n\n    var failedLambdas = [];\n\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      var _λ = uniqueValues[_i4];\n\n      var _A = subtract(U, multiply(_λ, E)); // the characteristic matrix\n\n\n      var solutions = usolveAll(_A, b);\n      solutions = solutions.map(v => multiply(C, v));\n      solutions.shift(); // ignore the null vector\n      // looks like we missed something, try inverse iteration\n\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(_A, N, solutions, prec, type);\n\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(_λ);\n          break;\n        }\n\n        solutions.push(approxVec);\n      }\n\n      vectors.push(...solutions.map(v => flatten(v)));\n    }\n\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n\n    return vectors;\n  }\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n\n\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n\n\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular\n    // return an identity matrix\n\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    } // matrix is diagonalizable\n    // return its eigenvectors as columns\n\n\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    } // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n\n\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    } // add rows\n\n\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n\n    return arr;\n  }\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n\n\n  function blockDiag(arr, N) {\n    var M = [];\n\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n\n    var I = 0;\n\n    for (var sub of arr) {\n      var n = sub.length;\n\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n\n      I += n;\n    }\n\n    return M;\n  }\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n\n\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n\n\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n    // you better choose a random vector before I count to five\n\n    var i = 0;\n\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n\n      if (++i >= 5) {\n        return null;\n      }\n    } // you better converge before I count to ten\n\n\n    i = 0;\n\n    while (true) {\n      var c = usolve(A, b);\n\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n\n      if (++i >= 10) {\n        return null;\n      }\n\n      b = normalize(c);\n    }\n\n    return b;\n  }\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n\n\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex'; // generate random vector with the correct type\n\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n\n    if (cplx) {\n      v = v.map(n => complex(n));\n    } // project to orthogonal complement\n\n\n    v = orthogonalComplement(v, orthog); // normalize\n\n    return normalize(v, type);\n  }\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n\n\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n\n    return v;\n  }\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n\n\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n\n\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n\n  return complexEigs;\n}"]},"metadata":{},"sourceType":"module"}