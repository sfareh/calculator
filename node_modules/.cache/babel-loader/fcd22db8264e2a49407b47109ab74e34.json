{"ast":null,"code":"import { createMap, isMap } from '../../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js"],"names":["createMap","isMap","isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","parse","FunctionNode","OperatorNode","ParenthesisNode","resolve","node","scope","value","get","String","args","map","arg","op","fn","implicit","content","_args"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,uBAAjC;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,cAAjC,EAAiDC,iBAAjD,EAAoEC,YAApE,QAAwF,sBAAxF;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,cAA1B,EAA0C,iBAA1C,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASK,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAC5B,QAAI,CAACA,KAAL,EAAY;AACV,aAAOD,IAAP;AACD;;AAED,QAAI,CAAChB,KAAK,CAACiB,KAAD,CAAV,EAAmB;AACjBA,MAAAA,KAAK,GAAGlB,SAAS,CAACkB,KAAD,CAAjB;AACD;;AAED,QAAIZ,YAAY,CAACW,IAAD,CAAhB,EAAwB;AACtB,UAAIE,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAUH,IAAI,CAACT,IAAf,CAAZ;;AAEA,UAAIL,MAAM,CAACgB,KAAD,CAAV,EAAmB;AACjB,eAAOH,OAAO,CAACG,KAAD,EAAQD,KAAR,CAAd;AACD,OAFD,MAEO,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AACpC,eAAOP,KAAK,CAACS,MAAM,CAACF,KAAD,CAAP,CAAZ;AACD;AACF,KARD,MAQO,IAAIf,cAAc,CAACa,IAAD,CAAlB,EAA0B;AAC/B,UAAIK,IAAI,GAAGL,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAc,UAAUC,GAAV,EAAe;AACtC,eAAOR,OAAO,CAACQ,GAAD,EAAMN,KAAN,CAAd;AACD,OAFU,CAAX;AAGA,aAAO,IAAIJ,YAAJ,CAAiBG,IAAI,CAACQ,EAAtB,EAA0BR,IAAI,CAACS,EAA/B,EAAmCJ,IAAnC,EAAyCL,IAAI,CAACU,QAA9C,CAAP;AACD,KALM,MAKA,IAAItB,iBAAiB,CAACY,IAAD,CAArB,EAA6B;AAClC,aAAO,IAAIF,eAAJ,CAAoBC,OAAO,CAACC,IAAI,CAACW,OAAN,EAAeV,KAAf,CAA3B,CAAP;AACD,KAFM,MAEA,IAAIhB,cAAc,CAACe,IAAD,CAAlB,EAA0B;AAC/B,UAAIY,KAAK,GAAGZ,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAc,UAAUC,GAAV,EAAe;AACvC,eAAOR,OAAO,CAACQ,GAAD,EAAMN,KAAN,CAAd;AACD,OAFW,CAAZ;;AAIA,aAAO,IAAIL,YAAJ,CAAiBI,IAAI,CAACT,IAAtB,EAA4BqB,KAA5B,CAAP;AACD;;AAED,WAAOZ,IAAP;AACD;;AAED,SAAOD,OAAP;AACD,CA7DgD,CAA1C","sourcesContent":["import { createMap, isMap } from '../../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (!isMap(scope)) {\n      scope = createMap(scope);\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});"]},"metadata":{},"sourceType":"module"}