{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is.js';\nimport { createSubScope } from '../../../utils/scope.js';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = createSubScope(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope.set(name, x);\n    return eq.evaluate(subScope);\n  };\n}","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js"],"names":["isSymbolNode","createSubScope","compileInlineExpression","expression","math","scope","symbol","filter","node","name","has","Error","subScope","eq","compile","inlineExpression","x","set","evaluate"],"mappings":"AAAA,SAASA,YAAT,QAA6B,sBAA7B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0D;AAC/D;AACA,MAAIC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkB,UAAUC,IAAV,EAAgB;AAC7C,WAAOR,YAAY,CAACQ,IAAD,CAAZ,IAAsB,EAAEA,IAAI,CAACC,IAAL,IAAaL,IAAf,CAAtB,IAA8C,CAACC,KAAK,CAACK,GAAN,CAAUF,IAAI,CAACC,IAAf,CAAtD;AACD,GAFY,EAEV,CAFU,CAAb;;AAIA,MAAI,CAACH,MAAL,EAAa;AACX,UAAM,IAAIK,KAAJ,CAAU,uDAAuDR,UAAvD,GAAoE,GAA9E,CAAN;AACD,GAR8D,CAQ7D;;;AAGF,MAAIM,IAAI,GAAGH,MAAM,CAACG,IAAlB,CAX+D,CAWvC;;AAExB,MAAIG,QAAQ,GAAGX,cAAc,CAACI,KAAD,CAA7B;AACA,MAAIQ,EAAE,GAAGV,UAAU,CAACW,OAAX,EAAT;AACA,SAAO,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAClCJ,IAAAA,QAAQ,CAACK,GAAT,CAAaR,IAAb,EAAmBO,CAAnB;AACA,WAAOH,EAAE,CAACK,QAAH,CAAYN,QAAZ,CAAP;AACD,GAHD;AAID","sourcesContent":["import { isSymbolNode } from '../../../utils/is.js';\nimport { createSubScope } from '../../../utils/scope.js';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = createSubScope(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope.set(name, x);\n    return eq.evaluate(subScope);\n  };\n}"]},"metadata":{},"sourceType":"module"}