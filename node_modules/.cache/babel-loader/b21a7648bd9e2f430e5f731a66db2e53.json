{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // return 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/function/arithmetic/invmod.js"],"names":["factory","name","dependencies","createInvmod","_ref","typed","config","BigNumber","xgcd","equal","smaller","mod","add","isInteger","invmod","a","b","Error","res","valueOf","gcd","inv","NaN"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,MAAjC,EAAyC,OAAzC,EAAkD,SAAlD,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,WAA3E,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC3E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,SAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA,KALE;AAMFC,IAAAA,OANE;AAOFC,IAAAA,GAPE;AAQFC,IAAAA,GARE;AASFC,IAAAA;AATE,MAUAT,IAVJ;AAYA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBa,MADD;AAEjB,4BAAwBA;AAFP,GAAP,CAAZ;;AAKA,WAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACpB,QAAI,CAACH,SAAS,CAACE,CAAD,CAAV,IAAiB,CAACF,SAAS,CAACG,CAAD,CAA/B,EAAoC,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACpCF,IAAAA,CAAC,GAAGJ,GAAG,CAACI,CAAD,EAAIC,CAAJ,CAAP;AACA,QAAIP,KAAK,CAACO,CAAD,EAAI,CAAJ,CAAT,EAAiB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACjB,QAAIC,GAAG,GAAGV,IAAI,CAACO,CAAD,EAAIC,CAAJ,CAAd;AACAE,IAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,EAAN;AACA,QAAI,CAACC,GAAD,EAAMC,GAAN,IAAaH,GAAjB;AACA,QAAI,CAACT,KAAK,CAACW,GAAD,EAAMb,SAAS,CAAC,CAAD,CAAf,CAAV,EAA+B,OAAOe,GAAP;AAC/BD,IAAAA,GAAG,GAAGV,GAAG,CAACU,GAAD,EAAML,CAAN,CAAT;AACA,QAAIN,OAAO,CAACW,GAAD,EAAMd,SAAS,CAAC,CAAD,CAAf,CAAX,EAAgCc,GAAG,GAAGT,GAAG,CAACS,GAAD,EAAML,CAAN,CAAT;AAChC,WAAOK,GAAP;AACD;AACF,CArD+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // return 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});"]},"metadata":{},"sourceType":"module"}