{"ast":null,"code":"import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyCore } from './simplify/simplifyCore.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { createResolve } from './simplify/resolve.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var {\n    isCommutative,\n    isAssociative,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n        and any changes to it, along with the rule responsible, to console\n   *  - `exactFractions` (true): whether to try to convert all constants to\n        exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n        be expressed as fractions only when both numerator and denominator\n        are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: 'v * (-c)'\n  }, // make non-constant terms positive\n  {\n    l: '-v',\n    r: 'v * (-1)'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, simplifyConstant, // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  }, // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  }, // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, // remove parenthesis in the case of negating a quantity\n  // (It might seem this rule should precede collecting like terms,\n  // but putting it after gives another chance of noticing like terms,\n  // and any new like terms produced by this will be collected\n  // on the next pass through all the rules.)\n  {\n    l: 'n1 + (n2 + n3)*(-1)',\n    r: 'n1 + n2*(-1) + n3*(-1)'\n  }, // make factors positive (and undo 'make non-constant terms positive')\n  {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  }, // final ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  }, // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  }, // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  }, // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  }, // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n\n          if (rule.context) {\n            newRule.context = rule.context;\n          }\n\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n\n            var expandsym = _getExpandPlaceholderSymbol();\n\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function mapRule(nodes, rule) {\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        nodes[i] = applyRule(nodes[i], rule);\n      }\n    }\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, applying the rule to it\n      // will have no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        mapRule(res.args, rule);\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } else if (res instanceof ArrayNode) {\n        mapRule(res.items, rule);\n      } else if (res instanceof AccessorNode) {\n        if (res.object) {\n          res.object = applyRule(res.object, rule);\n        }\n\n        if (res.index) {\n          res.index = applyRule(res.index, rule);\n        }\n      } else if (res instanceof IndexNode) {\n        mapRule(res.dimensions, rule);\n      } else if (res instanceof ObjectNode) {\n        for (var prop in res.properties) {\n          res.properties[prop] = applyRule(res.properties[prop], rule);\n        }\n      } // Try to match a rule against this node\n\n\n      var repl = rule.r;\n\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"names":["isConstantNode","isParenthesisNode","factory","createUtil","createSimplifyCore","createSimplifyConstant","createResolve","hasOwnProperty","createEmptyMap","createMap","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","simplifyConstant","simplifyCore","resolve","isCommutative","isAssociative","flatten","unflattenr","unflattenl","createMakeNodeFunction","simplify","string","expr","rules","stringMapObject","scope","stringMapObjectObject","options","stringArray","stringArrayMapObject","stringArrayMapObjectObject","NodeMapObject","NodeMapObjectObject","Node","NodeArray","NodeArrayMapObject","NodeArrayObjectObject","debug","consoleDebug","_buildRules","res","removeParens","visited","str","toString","parenthesis","_lastsym","laststr","console","log","i","length","rulestr","applyRule","concat","l","r","newstr","node","transform","path","parent","content","SUPPORTED_CONSTANTS","true","false","e","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","context","commutative","ruleSet","rule","newRule","ruleType","lr","split","SyntaxError","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","TypeError","push","mapRule","nodes","NodeObject","args","items","object","index","dimensions","prop","properties","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","slice","splice","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","s","JSON","stringify","isSplit","op","fn","childMatch","splits","splitMatches","_i","matchSet","Error","substring","value","p","q"],"mappings":"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","sourcesContent":["import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyCore } from './simplify/simplifyCore.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { createResolve } from './simplify/resolve.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var {\n    isCommutative,\n    isAssociative,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n        and any changes to it, along with the rule responsible, to console\n   *  - `exactFractions` (true): whether to try to convert all constants to\n        exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n        be expressed as fractions only when both numerator and denominator\n        are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: 'v * (-c)'\n  }, // make non-constant terms positive\n  {\n    l: '-v',\n    r: 'v * (-1)'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, simplifyConstant, // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  }, // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  }, // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, // remove parenthesis in the case of negating a quantity\n  // (It might seem this rule should precede collecting like terms,\n  // but putting it after gives another chance of noticing like terms,\n  // and any new like terms produced by this will be collected\n  // on the next pass through all the rules.)\n  {\n    l: 'n1 + (n2 + n3)*(-1)',\n    r: 'n1 + n2*(-1) + n3*(-1)'\n  }, // make factors positive (and undo 'make non-constant terms positive')\n  {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  }, // final ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  }, // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  }, // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  }, // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  }, // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n\n          if (rule.context) {\n            newRule.context = rule.context;\n          }\n\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n\n            var expandsym = _getExpandPlaceholderSymbol();\n\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function mapRule(nodes, rule) {\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        nodes[i] = applyRule(nodes[i], rule);\n      }\n    }\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, applying the rule to it\n      // will have no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        mapRule(res.args, rule);\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } else if (res instanceof ArrayNode) {\n        mapRule(res.items, rule);\n      } else if (res instanceof AccessorNode) {\n        if (res.object) {\n          res.object = applyRule(res.object, rule);\n        }\n\n        if (res.index) {\n          res.index = applyRule(res.index, rule);\n        }\n      } else if (res instanceof IndexNode) {\n        mapRule(res.dimensions, rule);\n      } else if (res instanceof ObjectNode) {\n        for (var prop in res.properties) {\n          res.properties[prop] = applyRule(res.properties[prop], rule);\n        }\n      } // Try to match a rule against this node\n\n\n      var repl = rule.r;\n\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"]},"metadata":{},"sourceType":"module"}