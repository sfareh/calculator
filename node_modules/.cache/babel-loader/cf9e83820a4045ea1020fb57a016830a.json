{"ast":null,"code":"// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isMatrix, isNode, isArrayNode, isConstantNode, isIndexNode, isObjectNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    return _ensureNode(foldFraction(expr, options));\n  }\n\n  function _removeFractions(thing) {\n    if (isFraction(thing)) {\n      return thing.valueOf();\n    }\n\n    if (thing instanceof Array) {\n      return thing.map(_removeFractions);\n    }\n\n    if (isMatrix(thing)) {\n      return matrix(_removeFractions(thing.valueOf()));\n    }\n\n    return thing;\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return mathWithTransform[fnname].apply(null, args);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(_removeFractions);\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    },\n    string: function string(s) {\n      return new ConstantNode(s);\n    },\n    Matrix: function Matrix(m) {\n      return new ArrayNode(m.valueOf().map(e => _toNode(e)));\n    }\n  });\n\n  function _ensureNode(thing) {\n    if (isNode(thing)) {\n      return thing;\n    }\n\n    return _toNode(thing);\n  } // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    },\n    'Matrix, Object': function MatrixObject(s, options) {\n      return matrix(_exactFraction(s.valueOf()));\n    },\n    'Array, Object': function ArrayObject(s, options) {\n      return s.map(_exactFraction);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */\n\n\n  function _foldAccessor(obj, index, options) {\n    if (!isIndexNode(index)) {\n      // don't know what to do with that...\n      return new AccessorNode(_ensureNode(obj), _ensureNode(index));\n    }\n\n    if (isArrayNode(obj) || isMatrix(obj)) {\n      var remainingDims = Array.from(index.dimensions);\n      /* We will resolve constant indices one at a time, looking\n       * just in the first or second dimensions because (a) arrays\n       * of more than two dimensions are likely rare, and (b) pulling\n       * out the third or higher dimension would be pretty intricate.\n       * The price is that we miss simplifying [..3d array][x,y,1]\n       */\n\n      while (remainingDims.length > 0) {\n        if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {\n          var first = _toNumber(remainingDims.shift().value, options);\n\n          if (isArrayNode(obj)) {\n            obj = obj.items[first - 1];\n          } else {\n            // matrix\n            obj = obj.valueOf()[first - 1];\n\n            if (obj instanceof Array) {\n              obj = matrix(obj);\n            }\n          }\n        } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {\n          var second = _toNumber(remainingDims[1].value, options);\n\n          var tryItems = [];\n          var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();\n\n          for (var item of fromItems) {\n            if (isArrayNode(item)) {\n              tryItems.push(item.items[second - 1]);\n            } else if (isMatrix(obj)) {\n              tryItems.push(item[second - 1]);\n            } else {\n              break;\n            }\n          }\n\n          if (tryItems.length === fromItems.length) {\n            if (isArrayNode(obj)) {\n              obj = new ArrayNode(tryItems);\n            } else {\n              // matrix\n              obj = matrix(tryItems);\n            }\n\n            remainingDims.splice(1, 1);\n          } else {\n            // extracting slice along 2nd dimension failed, give up\n            break;\n          }\n        } else {\n          // neither 1st or 2nd dimension is constant, give up\n          break;\n        }\n      }\n\n      if (remainingDims.length === index.dimensions.length) {\n        /* No successful constant indexing */\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n\n      if (remainingDims.length > 0) {\n        /* Indexed some but not all dimensions */\n        index = new IndexNode(remainingDims);\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      /* All dimensions were constant, access completely resolved */\n\n\n      return obj;\n    }\n\n    if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {\n      var key = index.dimensions[0].value;\n\n      if (key in obj.properties) {\n        return obj.properties[key];\n      }\n\n      return new ConstantNode(); // undefined\n    }\n    /* Don't know how to index this sort of obj, at least not with this index */\n\n\n    return new AccessorNode(_ensureNode(obj), index);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        switch (typeof node.value) {\n          case 'number':\n            return _toNumber(node.value, options);\n\n          case 'string':\n            return node.value;\n\n          default:\n            if (!isNaN(node.value)) return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontinue) {}\n            } // Size of a matrix does not depend on entries\n\n\n            if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {\n              var sz = [];\n              var section = args[0];\n\n              while (isArrayNode(section)) {\n                sz.push(section.items.length);\n                section = section.items[0];\n              }\n\n              return matrix(sz);\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            return new FunctionNode(node.name, args.map(_ensureNode));\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n        return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);\n\n      case 'ArrayNode':\n        {\n          var foldItems = node.items.map(item => foldFraction(item, options));\n\n          if (foldItems.some(isNode)) {\n            return new ArrayNode(foldItems.map(_ensureNode));\n          }\n          /* All literals -- return a Matrix so we can operate on it */\n\n\n          return matrix(foldItems);\n        }\n\n      case 'IndexNode':\n        {\n          return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));\n        }\n\n      case 'ObjectNode':\n        {\n          var foldProps = {};\n\n          for (var prop in node.properties) {\n            foldProps[prop] = simplifyConstant(node.properties[prop], options);\n          }\n\n          return new ObjectNode(foldProps);\n        }\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js"],"names":["isFraction","isMatrix","isNode","isArrayNode","isConstantNode","isIndexNode","isObjectNode","isOperatorNode","factory","createUtil","noBignumber","noFraction","name","dependencies","createSimplifyConstant","_ref","typed","config","mathWithTransform","matrix","fraction","bignumber","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode","isCommutative","isAssociative","allChildren","createMakeNodeFunction","simplifyConstant","expr","options","_ensureNode","foldFraction","_removeFractions","thing","valueOf","Array","map","_eval","fnname","args","apply","ignore","_toNumber","_toNode","Fraction","_fractionToNode","number","n","unaryMinusNode","BigNumber","Complex","s","Error","string","Matrix","m","e","_exactFraction","exactFractions","isFinite","f","fractionsLimit","Infinity","d","stringObject","undefined","parseFloat","FractionObject","BigNumberObject","numberObject","ComplexObject","im","re","MatrixObject","ArrayObject","vn","_foldAccessor","obj","index","remainingDims","from","dimensions","length","value","first","shift","items","second","tryItems","fromItems","item","push","splice","key","properties","foldOp","fn","makeNode","reduce","a","b","ignoreandcontinue","node","type","isNaN","rawArgs","operatorFunctions","indexOf","arg","some","sz","section","toString","_args","res","isUnary","consts","vars","i","unshift","content","object","foldItems","foldProps","prop","concat"],"mappings":"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","sourcesContent":["// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isMatrix, isNode, isArrayNode, isConstantNode, isIndexNode, isObjectNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    return _ensureNode(foldFraction(expr, options));\n  }\n\n  function _removeFractions(thing) {\n    if (isFraction(thing)) {\n      return thing.valueOf();\n    }\n\n    if (thing instanceof Array) {\n      return thing.map(_removeFractions);\n    }\n\n    if (isMatrix(thing)) {\n      return matrix(_removeFractions(thing.valueOf()));\n    }\n\n    return thing;\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return mathWithTransform[fnname].apply(null, args);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(_removeFractions);\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    },\n    string: function string(s) {\n      return new ConstantNode(s);\n    },\n    Matrix: function Matrix(m) {\n      return new ArrayNode(m.valueOf().map(e => _toNode(e)));\n    }\n  });\n\n  function _ensureNode(thing) {\n    if (isNode(thing)) {\n      return thing;\n    }\n\n    return _toNode(thing);\n  } // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    },\n    'Matrix, Object': function MatrixObject(s, options) {\n      return matrix(_exactFraction(s.valueOf()));\n    },\n    'Array, Object': function ArrayObject(s, options) {\n      return s.map(_exactFraction);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */\n\n\n  function _foldAccessor(obj, index, options) {\n    if (!isIndexNode(index)) {\n      // don't know what to do with that...\n      return new AccessorNode(_ensureNode(obj), _ensureNode(index));\n    }\n\n    if (isArrayNode(obj) || isMatrix(obj)) {\n      var remainingDims = Array.from(index.dimensions);\n      /* We will resolve constant indices one at a time, looking\n       * just in the first or second dimensions because (a) arrays\n       * of more than two dimensions are likely rare, and (b) pulling\n       * out the third or higher dimension would be pretty intricate.\n       * The price is that we miss simplifying [..3d array][x,y,1]\n       */\n\n      while (remainingDims.length > 0) {\n        if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {\n          var first = _toNumber(remainingDims.shift().value, options);\n\n          if (isArrayNode(obj)) {\n            obj = obj.items[first - 1];\n          } else {\n            // matrix\n            obj = obj.valueOf()[first - 1];\n\n            if (obj instanceof Array) {\n              obj = matrix(obj);\n            }\n          }\n        } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {\n          var second = _toNumber(remainingDims[1].value, options);\n\n          var tryItems = [];\n          var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();\n\n          for (var item of fromItems) {\n            if (isArrayNode(item)) {\n              tryItems.push(item.items[second - 1]);\n            } else if (isMatrix(obj)) {\n              tryItems.push(item[second - 1]);\n            } else {\n              break;\n            }\n          }\n\n          if (tryItems.length === fromItems.length) {\n            if (isArrayNode(obj)) {\n              obj = new ArrayNode(tryItems);\n            } else {\n              // matrix\n              obj = matrix(tryItems);\n            }\n\n            remainingDims.splice(1, 1);\n          } else {\n            // extracting slice along 2nd dimension failed, give up\n            break;\n          }\n        } else {\n          // neither 1st or 2nd dimension is constant, give up\n          break;\n        }\n      }\n\n      if (remainingDims.length === index.dimensions.length) {\n        /* No successful constant indexing */\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n\n      if (remainingDims.length > 0) {\n        /* Indexed some but not all dimensions */\n        index = new IndexNode(remainingDims);\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      /* All dimensions were constant, access completely resolved */\n\n\n      return obj;\n    }\n\n    if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {\n      var key = index.dimensions[0].value;\n\n      if (key in obj.properties) {\n        return obj.properties[key];\n      }\n\n      return new ConstantNode(); // undefined\n    }\n    /* Don't know how to index this sort of obj, at least not with this index */\n\n\n    return new AccessorNode(_ensureNode(obj), index);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        switch (typeof node.value) {\n          case 'number':\n            return _toNumber(node.value, options);\n\n          case 'string':\n            return node.value;\n\n          default:\n            if (!isNaN(node.value)) return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontinue) {}\n            } // Size of a matrix does not depend on entries\n\n\n            if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {\n              var sz = [];\n              var section = args[0];\n\n              while (isArrayNode(section)) {\n                sz.push(section.items.length);\n                section = section.items[0];\n              }\n\n              return matrix(sz);\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            return new FunctionNode(node.name, args.map(_ensureNode));\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n        return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);\n\n      case 'ArrayNode':\n        {\n          var foldItems = node.items.map(item => foldFraction(item, options));\n\n          if (foldItems.some(isNode)) {\n            return new ArrayNode(foldItems.map(_ensureNode));\n          }\n          /* All literals -- return a Matrix so we can operate on it */\n\n\n          return matrix(foldItems);\n        }\n\n      case 'IndexNode':\n        {\n          return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));\n        }\n\n      case 'ObjectNode':\n        {\n          var foldProps = {};\n\n          for (var prop in node.properties) {\n            foldProps[prop] = simplifyConstant(node.properties[prop], options);\n          }\n\n          return new ObjectNode(foldProps);\n        }\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});"]},"metadata":{},"sourceType":"module"}