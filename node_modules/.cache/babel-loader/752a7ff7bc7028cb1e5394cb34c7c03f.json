{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/Users/sarahrouini/PMN/calculator/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"names":["_extends","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","Error","undefined","TypeError","u","parse","units","dimensions","unit","UNIT_NONE","prefix","PREFIXES","NONE","power","BASE_DIMENSIONS","_normalize","fixPrefix","skipAutomaticSimplification","prototype","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","p","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","slice","_isDerived","Math","unitValue","unitOffset","unitPower","unitPrefixValue","convert","_getNumberConverter","offset","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_i","inverted","valThis","valOther","getNumericIfUnitless","divide","_i2","_i3","predictable","ret","W","to","valuelessUnit","concat","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","x","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","map","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, name)\n   *     const b = new Unit(null, name)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    if (name !== undefined && (typeof name !== 'string' || name === '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name !== undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else {\n      this.units = [{\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE,\n        // link to a list with supported prefixes\n        power: 0\n      }];\n      this.dimensions = [];\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = value !== undefined && value !== null ? this._normalize(value) : null;\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n\n    this.skipAutomaticSimplification = true;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitOffset = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));\n    }\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    } else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower = convert(this.units[i].power);\n        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    } else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset = convert(this.units[0].unit.offset);\n\n      if (prefixValue === undefined || prefixValue === null) {\n        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);\n      } else {\n        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = ret.value !== null ? abs(ret.value) : null;\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value === null ? this._normalize(1) : this.value;\n\n    if (typeof valuelessUnit === 'string') {\n      // other = new Unit(null, valuelessUnit)\n      other = Unit.parse(valuelessUnit);\n\n      if (!this.equalBase(other)) {\n        throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else if (isUnit(valuelessUnit)) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error(\"Units do not match ('\".concat(valuelessUnit.toString(), \"' != '\").concat(this.toString(), \"')\"));\n      }\n\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.skipAutomaticSimplification = true;\n      return other;\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}